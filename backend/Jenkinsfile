pipeline {
    agent any
    environment {
        DOCKERHUB_CREDENTIALS = credentials('docker_hub_token')
        CREWIN_ENV = credentials('jenkins_crewin_backend.env') // secretfile 가져오기
    }
    stages {
        stage('Load Environment Variables') {
            steps {
                script {
                    def props = readProperties(file: env.CREWIN_ENV)
                    env.SONAR_PROJECT_KEY = props['SONAR_PROJECT_KEY']
                    env.SONAR_HOST_URL = props['SONAR_HOST_URL']
                    env.SONAR_LOGIN = props['SONAR_LOGIN']
                    env.DOCKER_REPO = props['DOCKER_REPO']
                    env.DOCKER_TAG = props['DOCKER_TAG']
                    env.DOCKER_IMAGE = props['DOCKER_IMAGE']
                    env.BLUE_PORT = props['BLUE_PORT']
                    env.GREEN_PORT = props['GREEN_PORT']
                    env.CONTAINER_NAME_BLUE = props['CONTAINER_NAME_BLUE']
                    env.CONTAINER_NAME_GREEN = props['CONTAINER_NAME_GREEN']
                    env.NGINX_CONTAINER_NAME = props['NGINX_CONTAINER_NAME']
                    env.NGINX_CONFIG_PATH = props['NGINX_CONFIG_PATH']
                    env.MATTERMOST_CHANNEL_NAME = props['MATTERMOST_CHANNEL_NAME']
                    env.MATTERMOST_WEBHOOK_URL = props['MATTERMOST_WEBHOOK_URL']
                    env.DOCKER_NETWORK = props['DOCKER_NETWORK']
                    env.DEPLOY_LOG_PATH = props['DEPLOY_LOG_PATH']
                    env.CREW_IN_LOG_PATH = props['CREW_IN_LOG_PATH']
                }
            }
        }
        stage('Notify Build Start') {
            steps {
                script {
                    def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                    def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                    def Commit_Message = sh(script: "git log -1 --pretty=%B", returnStdout: true).trim()

                    // 모든 커밋 메시지 가져오기
                    def allCommits = sh(script: "git log --pretty=format:'%h - %s (%an)' $env.GIT_PREVIOUS_SUCCESSFUL_COMMIT..HEAD", returnStdout: true).trim()
                    def formattedCommits = allCommits.split('\\n').collect { line ->
                        def escapedLine = line.replaceAll("([\\[\\]\\(\\)])", '\\\\$1')
                        "• ${escapedLine}"
                    }.join('\\n')
                    def message = """
                        #### 🌐BE 빌드 시작
                        **빌드 번호** $env.JOB_NAME #$env.BUILD_NUMBER
                        **브랜치:** $env.GIT_BRANCH
                        **작성자:** $Author_ID ($Author_Name)
                        **빌드 URL:** [Details]($env.BUILD_URL)
                        **포함된 커밋:**
                        $formattedCommits
                    """.stripIndent()

                    mattermostSend(
                        color: '#439FE0',
                        message: message,
                        endpoint: "$env.MATTERMOST_WEBHOOK_URL",
                        channel: "$env.MATTERMOST_CHANNEL_NAME",
                        icon: 'https://jenkins.io/images/logos/jenkins/jenkins.png'
                    )
                }
            }
        }
        stage('Prepare Config') {
            steps {
                withCredentials([file(credentialsId: 'crewin-application-yml', variable: 'CONFIG_FILE')]) {
                    sh '''
                        mkdir -p backend/src/main/resources
                        chmod -R 755 backend/src/main/resources
                        cp $CONFIG_FILE backend/src/main/resources/application.yml
                    '''
                }
            }
        }
        stage('Build & Test') {
            steps {
                sh 'cd backend && chmod +x gradlew && ./gradlew clean build'
            }
        }
        stage('SonarQube analysis') {
            steps {
                withSonarQubeEnv('sonarQubeToken') {
                    sh '''
                        cd backend
                        chmod +x gradlew
                        ./gradlew sonar \
                            -Dsonar.projectKey=$SONAR_PROJECT_KEY \
                            -Dsonar.host.url=$SONAR_HOST_URL \
                            -Dsonar.login=$SONAR_LOGIN
                    '''
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    sh 'cd backend && docker build -t $DOCKER_IMAGE .'
                }
            }
        }
        stage('Login to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker_hub_token', usernameVariable: 'DOCKER_HUB_CREDENTIALS_USR', passwordVariable: 'DOCKER_HUB_CREDENTIALS_PSW')]) {
                        sh 'docker login -u $DOCKER_HUB_CREDENTIALS_USR -p $DOCKER_HUB_CREDENTIALS_PSW'
                    }
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                script {
                    sh 'docker push $DOCKER_IMAGE'
                }
            }
        }
        stage('Deploy and Update Nginx') {
            steps {
                script {
                    sshPublisher(
                        publishers: [
                            sshPublisherDesc(
                                configName: 'Gumi-Server',
                                transfers: [
                                    sshTransfer(
                                        execCommand: """
                                            set -x  # 디버깅 모드 활성화
                                            exec > >(tee $DEPLOY_LOG_PATH) 2>&1
                                            docker pull $DOCKER_IMAGE

                                            # 새로 배포할 컨테이너 지정
                                            if [[ \$(docker ps -aq --filter name=$CONTAINER_NAME_BLUE) ]]; then
                                                # 블루 컨테이너 상태를 확인
                                                CONTAINER_STATUS=\$(docker inspect -f '{{.State.Status}}' $CONTAINER_NAME_BLUE)

                                                if [[ "\$CONTAINER_STATUS" == "exited" ]]; then
                                                    # exited 상태일 경우, 블루 컨테이너를 새 컨테이너로 지정
                                                    NEW_PORT=$BLUE_PORT
                                                    NEW_NAME=$CONTAINER_NAME_BLUE
                                                    OLD_NAME=$CONTAINER_NAME_GREEN
                                                    CURRENT_PORT=$GREEN_PORT
                                                    docker rm \$NEW_NAME
                                                else
                                                    # 그린 컨테이너를 새 컨테이너로 지정
                                                    NEW_PORT=$GREEN_PORT
                                                    NEW_NAME=$CONTAINER_NAME_GREEN
                                                    OLD_NAME=$CONTAINER_NAME_BLUE
                                                    CURRENT_PORT=$BLUE_PORT
                                                    docker rm \$NEW_NAME
                                                fi
                                            fi

                                            # 새 이미지로 컨테이너 생성
                                            docker run -d --name \$NEW_NAME --network $DOCKER_NETWORK -p \$NEW_PORT:8080 -v $CREW_IN_LOG_PATH:/logs $DOCKER_IMAGE

                                            sleep 30
                                            if curl -sf -m 10 http://localhost:\$NEW_PORT/health > /dev/null; then
                                                # Update Nginx config
                                                sed -i "s/# server \$NEW_NAME:8080;/server \$NEW_NAME:8080;/" $NGINX_CONFIG_PATH
                                                sed -i "s/server \$OLD_NAME:8080;/# server \$OLD_NAME:8080;/" $NGINX_CONFIG_PATH
                                                # Restart Nginx container
                                                docker restart $NGINX_CONTAINER_NAME
                                                # Stop old container (not remove)
                                                docker stop \$OLD_NAME
                                                echo "Switched to new version on port \$NEW_PORT and updated Nginx"
                                                exit 0
                                            else
                                                docker stop \$NEW_NAME
                                                echo "Deployment failed, keeping old version"
                                                exit 1
                                            fi
                                        """
                                    )
                                ]
                            )
                        ]
                    )
                }
            }
        }
    }
    post {
        always {
            script {
                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                def Commit_Message = sh(script: "git log -1 --pretty=%B", returnStdout: true).trim()
                def Build_Status = currentBuild.result ?: 'SUCCESS'
                def Status_Color = Build_Status == 'SUCCESS' ? 'good' : (Build_Status == 'UNSTABLE' ? 'warning' : 'danger')
                def Status_Text = Build_Status == 'SUCCESS' ? '빌드 성공' : (Build_Status == 'UNSTABLE' ? '빌드 불안정' : '빌드 실패')

                def allCommits = sh(script: "git log --pretty=format:'%h - %s (%an)' $env.GIT_PREVIOUS_SUCCESSFUL_COMMIT..HEAD", returnStdout: true).trim()
                def formattedCommits = allCommits.split('\\n').collect { line ->
                    def escapedLine = line.replaceAll("([\\[\\]\\(\\)])", '\\\\$1')
                    "• ${escapedLine}"
                }.join('\\n')

                def message = """
                    #### 🌐BE $Status_Text
                    **빌드 번호** $env.JOB_NAME #$env.BUILD_NUMBER
                    **브랜치:** $env.GIT_BRANCH
                    **작성자:** $Author_ID ($Author_Name)
                    **빌드 URL:** [Details]($env.BUILD_URL)
                    **포함된 커밋:**
                    $formattedCommits
                """.stripIndent()
                mattermostSend(
                    color: Status_Color,
                    message: message,
                    endpoint: "$env.MATTERMOST_WEBHOOK_URL",
                    channel: "$env.MATTERMOST_CHANNEL_NAME",
                    icon: 'https://jenkins.io/images/logos/jenkins/jenkins.png'
                )
            }
        }
    }
}
