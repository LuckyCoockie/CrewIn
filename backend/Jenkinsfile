pipeline {
    agent any
    environment {
        DOCKERHUB_CREDENTIALS = credentials('docker_hub_token') // Docker Hub 자격 증명 ID
        DOCKER_REPO = "limnyn/crewin"
        DOCKER_TAG = "backend" // 태그를 backend로 지정
        DOCKER_IMAGE = "${DOCKER_REPO}:${DOCKER_TAG}"
        HOST_CONATINER_PORT = "12380:8080"
        CONTAINER_NAME = "crewin_springboot_server"
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Prepare Config') {
            steps {
                withCredentials([file(credentialsId: 'crewin-application-yml', variable: 'CONFIG_FILE')]) {
                    sh '''
                        mkdir -p backend/src/main/resources
                        chmod -R 755 backend/src/main/resources
                        cp $CONFIG_FILE backend/src/main/resources/application.yml
                    '''
                }
            }
        }
        stage('Build & Test') {
            steps {
                sh 'cd backend && chmod +x gradlew && ./gradlew clean build'
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    sh 'cd backend && docker build -t $DOCKER_IMAGE .'
                }
            }
        }
        stage('Login to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker_hub_token', usernameVariable: 'DOCKER_HUB_CREDENTIALS_USR', passwordVariable: 'DOCKER_HUB_CREDENTIALS_PSW')]) {
                        sh 'docker login -u $DOCKER_HUB_CREDENTIALS_USR -p $DOCKER_HUB_CREDENTIALS_PSW'
                    }
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                script {
                    sh 'docker push $DOCKER_IMAGE'
                }
            }
        }
        stage('Deploy to Server') {
            steps {
                script {
                    sshPublisher(
                        publishers: [
                            sshPublisherDesc(
                                configName: 'Gumi-Server',
                                transfers: [
                                    sshTransfer(
                                        execCommand: """
                                            docker pull $DOCKER_IMAGE
                                            if [ \$(docker ps -q -f name=$CONTAINER_NAME) ]; then
                                                docker stop $CONTAINER_NAME
                                                docker rm $CONTAINER_NAME
                                            fi
                                            docker run -d --name $CONTAINER_NAME -p $HOST_CONATINER_PORT $DOCKER_IMAGE
                                        """
                                    )
                                ]
                            )
                        ]
                    )
                }
            }
        }
    }
    post {
        always {
            echo "파이프라인 실행이 완료되었습니다."
        }
        success {
            echo "파이프라인이 성공적으로 실행되었습니다."
        }
        failure {
            echo "파이프라인 실행 중 오류가 발생했습니다."
        }
    }
}

